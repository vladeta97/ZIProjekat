//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFile", ReplyAction="http://tempuri.org/IService1/UploadFileResponse")]
        string UploadFile(string fileName, byte[] data, int chunkId, long length, bool last, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFile", ReplyAction="http://tempuri.org/IService1/UploadFileResponse")]
        System.Threading.Tasks.Task<string> UploadFileAsync(string fileName, byte[] data, int chunkId, long length, bool last, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Download", ReplyAction="http://tempuri.org/IService1/DownloadResponse")]
        byte[] Download(string fileName, int chunkId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Download", ReplyAction="http://tempuri.org/IService1/DownloadResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadAsync(string fileName, int chunkId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AllFiles", ReplyAction="http://tempuri.org/IService1/AllFilesResponse")]
        string[] AllFiles(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AllFiles", ReplyAction="http://tempuri.org/IService1/AllFilesResponse")]
        System.Threading.Tasks.Task<string[]> AllFilesAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFileHash", ReplyAction="http://tempuri.org/IService1/GetFileHashResponse")]
        string GetFileHash(string userName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFileHash", ReplyAction="http://tempuri.org/IService1/GetFileHashResponse")]
        System.Threading.Tasks.Task<string> GetFileHashAsync(string userName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetFileHash", ReplyAction="http://tempuri.org/IService1/SetFileHashResponse")]
        void SetFileHash(string userName, string fileName, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetFileHash", ReplyAction="http://tempuri.org/IService1/SetFileHashResponse")]
        System.Threading.Tasks.Task SetFileHashAsync(string userName, string fileName, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        bool Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        bool Register(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUser", ReplyAction="http://tempuri.org/IService1/CheckUserResponse")]
        bool CheckUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUser", ReplyAction="http://tempuri.org/IService1/CheckUserResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FileInfo", ReplyAction="http://tempuri.org/IService1/FileInfoResponse")]
        System.IO.FileInfo FileInfo(string fileName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FileInfo", ReplyAction="http://tempuri.org/IService1/FileInfoResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo> FileInfoAsync(string fileName, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string UploadFile(string fileName, byte[] data, int chunkId, long length, bool last, string userName) {
            return base.Channel.UploadFile(fileName, data, chunkId, length, last, userName);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileAsync(string fileName, byte[] data, int chunkId, long length, bool last, string userName) {
            return base.Channel.UploadFileAsync(fileName, data, chunkId, length, last, userName);
        }
        
        public byte[] Download(string fileName, int chunkId, string userName) {
            return base.Channel.Download(fileName, chunkId, userName);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadAsync(string fileName, int chunkId, string userName) {
            return base.Channel.DownloadAsync(fileName, chunkId, userName);
        }
        
        public string[] AllFiles(string userName) {
            return base.Channel.AllFiles(userName);
        }
        
        public System.Threading.Tasks.Task<string[]> AllFilesAsync(string userName) {
            return base.Channel.AllFilesAsync(userName);
        }
        
        public string GetFileHash(string userName, string fileName) {
            return base.Channel.GetFileHash(userName, fileName);
        }
        
        public System.Threading.Tasks.Task<string> GetFileHashAsync(string userName, string fileName) {
            return base.Channel.GetFileHashAsync(userName, fileName);
        }
        
        public void SetFileHash(string userName, string fileName, string hash) {
            base.Channel.SetFileHash(userName, fileName, hash);
        }
        
        public System.Threading.Tasks.Task SetFileHashAsync(string userName, string fileName, string hash) {
            return base.Channel.SetFileHashAsync(userName, fileName, hash);
        }
        
        public bool Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public bool Register(string userName, string password) {
            return base.Channel.Register(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string userName, string password) {
            return base.Channel.RegisterAsync(userName, password);
        }
        
        public bool CheckUser(string userName) {
            return base.Channel.CheckUser(userName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAsync(string userName) {
            return base.Channel.CheckUserAsync(userName);
        }
        
        public System.IO.FileInfo FileInfo(string fileName, string userName) {
            return base.Channel.FileInfo(fileName, userName);
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo> FileInfoAsync(string fileName, string userName) {
            return base.Channel.FileInfoAsync(fileName, userName);
        }
    }
}
